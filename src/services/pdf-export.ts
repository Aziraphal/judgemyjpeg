import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'
import { PhotoAnalysis } from './openai'

interface BatchPhoto {
  id: string
  file: File
  url: string
  analysis?: PhotoAnalysis
  status: 'pending' | 'analyzing' | 'completed' | 'error'
}

interface BatchReport {
  totalPhotos: number
  avgScore: number
  topPhoto: BatchPhoto | null
  worstPhoto: BatchPhoto | null
  categoryAnalysis: {
    composition: number
    lighting: number
    focus: number
    exposure: number
    creativity: number
    emotion: number
    storytelling: number
  }
  overallRecommendations: string[]
}

export class PDFExporter {
  private pdf: jsPDF
  private pageHeight: number = 297 // A4 height in mm
  private pageWidth: number = 210 // A4 width in mm
  private margin: number = 20
  private currentY: number = 20

  constructor() {
    this.pdf = new jsPDF('p', 'mm', 'a4')
  }

  async exportBatchReport(
    photos: BatchPhoto[], 
    report: BatchReport, 
    userEmail: string
  ): Promise<void> {
    // Page de garde
    await this.createCoverPage(report, userEmail)
    
    // R√©sum√© ex√©cutif
    this.createSummaryPage(report)
    
    // Analyse d√©taill√©e de chaque photo
    for (const photo of photos.filter(p => p.analysis)) {
      await this.createPhotoAnalysisPage(photo)
    }
    
    // Recommandations globales
    this.createRecommendationsPage(report)
    
    // Page de conclusions
    this.createConclusionPage(report)
    
    // T√©l√©charger le PDF
    const timestamp = new Date().toISOString().split('T')[0]
    this.pdf.save(`JudgeMyJPEG_Rapport_${timestamp}.pdf`)
  }

  private async createCoverPage(report: BatchReport, userEmail: string) {
    this.pdf.setFillColor(15, 23, 42) // cosmic-dark
    this.pdf.rect(0, 0, this.pageWidth, this.pageHeight, 'F')
    
    // Titre principal
    this.pdf.setTextColor(236, 72, 153) // neon-pink
    this.pdf.setFontSize(32)
    this.pdf.setFont('helvetica', 'bold')
    
    const title = 'JudgeMyJPEG'
    const titleWidth = this.pdf.getTextWidth(title)
    this.pdf.text(title, (this.pageWidth - titleWidth) / 2, 60)
    
    // Sous-titre
    this.pdf.setTextColor(34, 211, 238) // neon-cyan
    this.pdf.setFontSize(18)
    this.pdf.setFont('helvetica', 'normal')
    
    const subtitle = 'Rapport d\'Analyse Photographique Professionnel'
    const subtitleWidth = this.pdf.getTextWidth(subtitle)
    this.pdf.text(subtitle, (this.pageWidth - subtitleWidth) / 2, 75)
    
    // Informations du rapport
    this.pdf.setTextColor(148, 163, 184) // text-gray
    this.pdf.setFontSize(12)
    
    const info = [
      `Date: ${new Date().toLocaleDateString('fr-FR')}`,
      `Client: ${userEmail}`,
      `Photos analys√©es: ${report.totalPhotos}`,
      `Score moyen: ${report.avgScore}/100`
    ]
    
    let infoY = 100
    info.forEach(line => {
      const lineWidth = this.pdf.getTextWidth(line)
      this.pdf.text(line, (this.pageWidth - lineWidth) / 2, infoY)
      infoY += 8
    })
    
    // Score global avec style
    this.pdf.setFillColor(34, 211, 238, 0.2) // neon-cyan bg
    this.pdf.roundedRect(50, 140, 110, 40, 5, 5, 'F')
    
    this.pdf.setTextColor(34, 211, 238)
    this.pdf.setFontSize(16)
    this.pdf.setFont('helvetica', 'bold')
    
    const scoreText = `Score Global: ${report.avgScore}/100`
    const scoreWidth = this.pdf.getTextWidth(scoreText)
    this.pdf.text(scoreText, (this.pageWidth - scoreWidth) / 2, 165)
    
    // Footer
    this.pdf.setTextColor(100, 116, 139)
    this.pdf.setFontSize(10)
    this.pdf.setFont('helvetica', 'italic')
    
    const footer = 'Analyse r√©alis√©e par Intelligence Artificielle OpenAI GPT-4o-mini'
    const footerWidth = this.pdf.getTextWidth(footer)
    this.pdf.text(footer, (this.pageWidth - footerWidth) / 2, 280)
  }

  private createSummaryPage(report: BatchReport) {
    this.addPage()
    
    // Titre de section
    this.addSectionTitle('üìä R√©sum√© Ex√©cutif')
    
    // Statistiques cl√©s
    this.pdf.setTextColor(64, 64, 64)
    this.pdf.setFontSize(12)
    this.pdf.setFont('helvetica', 'normal')
    
    const stats = [
      `üì∏ Nombre total de photos analys√©es: ${report.totalPhotos}`,
      `‚≠ê Score moyen obtenu: ${report.avgScore}/100`,
      `üèÜ Meilleure photo: ${report.topPhoto?.analysis?.score || 'N/A'}/100`,
      `üí™ Photo √† am√©liorer: ${report.worstPhoto?.analysis?.score || 'N/A'}/100`
    ]
    
    stats.forEach(stat => {
      this.pdf.text(stat, this.margin, this.currentY)
      this.currentY += 10
    })
    
    this.currentY += 10
    
    // Analyse par cat√©gorie
    this.addSubTitle('Analyse par Cat√©gorie')
    
    const categories = [
      { name: 'Composition', score: report.categoryAnalysis.composition, max: 15 },
      { name: '√âclairage', score: report.categoryAnalysis.lighting, max: 15 },
      { name: 'Mise au point', score: report.categoryAnalysis.focus, max: 15 },
      { name: 'Exposition', score: report.categoryAnalysis.exposure, max: 15 },
      { name: 'Cr√©ativit√©', score: report.categoryAnalysis.creativity, max: 15 },
      { name: '√âmotion', score: report.categoryAnalysis.emotion, max: 15 },
      { name: 'Narration', score: report.categoryAnalysis.storytelling, max: 10 }
    ]
    
    categories.forEach(cat => {
      const percentage = Math.round((cat.score / cat.max) * 100)
      
      // Nom de cat√©gorie
      this.pdf.setFont('helvetica', 'bold')
      this.pdf.text(`${cat.name}:`, this.margin, this.currentY)
      
      // Score
      this.pdf.setFont('helvetica', 'normal')
      this.pdf.text(`${cat.score}/${cat.max} (${percentage}%)`, this.margin + 50, this.currentY)
      
      // Barre de progression simple
      const barWidth = 80
      const fillWidth = (cat.score / cat.max) * barWidth
      
      // Fond de barre
      this.pdf.setFillColor(200, 200, 200)
      this.pdf.rect(this.margin + 100, this.currentY - 3, barWidth, 4, 'F')
      
      // Remplissage selon score
      const color = percentage >= 80 ? [34, 211, 238] : 
                    percentage >= 60 ? [255, 215, 0] : 
                    [236, 72, 153]
      
      this.pdf.setFillColor(color[0], color[1], color[2])
      this.pdf.rect(this.margin + 100, this.currentY - 3, fillWidth, 4, 'F')
      
      this.currentY += 12
    })
  }

  private async createPhotoAnalysisPage(photo: BatchPhoto) {
    this.addPage()
    
    if (!photo.analysis) return
    
    // Titre avec nom de fichier
    this.addSectionTitle(`üì∏ ${photo.file.name}`)
    
    // Score principal
    this.pdf.setFillColor(236, 72, 153, 0.1)
    this.pdf.roundedRect(this.margin, this.currentY, this.pageWidth - 2 * this.margin, 20, 3, 3, 'F')
    
    this.pdf.setTextColor(236, 72, 153)
    this.pdf.setFontSize(16)
    this.pdf.setFont('helvetica', 'bold')
    this.pdf.text(`Score: ${photo.analysis.score}/100`, this.margin + 5, this.currentY + 12)
    
    this.currentY += 30
    
    // Analyse technique
    this.addSubTitle('Analyse Technique')
    
    Object.entries(photo.analysis.technical).forEach(([key, value]) => {
      const title = key === 'composition' ? 'Composition' :
                    key === 'lighting' ? '√âclairage' :
                    key === 'focus' ? 'Mise au point' : 'Exposition'
      
      this.pdf.setFont('helvetica', 'bold')
      this.pdf.text(`${title}:`, this.margin, this.currentY)
      this.currentY += 7
      
      this.pdf.setFont('helvetica', 'normal')
      const lines = this.pdf.splitTextToSize(value, this.pageWidth - 2 * this.margin)
      this.pdf.text(lines, this.margin + 5, this.currentY)
      this.currentY += lines.length * 6 + 5
    })
    
    // Analyse artistique
    this.addSubTitle('Analyse Artistique')
    
    Object.entries(photo.analysis.artistic).forEach(([key, value]) => {
      const title = key === 'creativity' ? 'Cr√©ativit√©' :
                    key === 'emotion' ? '√âmotion' : 'Narration'
      
      this.pdf.setFont('helvetica', 'bold')
      this.pdf.text(`${title}:`, this.margin, this.currentY)
      this.currentY += 7
      
      this.pdf.setFont('helvetica', 'normal')
      const lines = this.pdf.splitTextToSize(value, this.pageWidth - 2 * this.margin)
      this.pdf.text(lines, this.margin + 5, this.currentY)
      this.currentY += lines.length * 6 + 5
    })
    
    // Suggestions d'am√©lioration
    if (photo.analysis.suggestions.length > 0) {
      this.addSubTitle('Suggestions d\'am√©lioration')
      
      photo.analysis.suggestions.forEach((suggestion, index) => {
        this.pdf.text(`${index + 1}.`, this.margin, this.currentY)
        const lines = this.pdf.splitTextToSize(suggestion, this.pageWidth - 2 * this.margin - 10)
        this.pdf.text(lines, this.margin + 8, this.currentY)
        this.currentY += lines.length * 6 + 3
      })
    }
  }

  private createRecommendationsPage(report: BatchReport) {
    this.addPage()
    
    this.addSectionTitle('üí° Recommandations Globales')
    
    this.pdf.setTextColor(64, 64, 64)
    this.pdf.setFontSize(12)
    this.pdf.text('Bas√©es sur l\'analyse de toutes vos photos:', this.margin, this.currentY)
    this.currentY += 15
    
    report.overallRecommendations.forEach((recommendation, index) => {
      this.pdf.setFont('helvetica', 'bold')
      this.pdf.text(`${index + 1}.`, this.margin, this.currentY)
      
      this.pdf.setFont('helvetica', 'normal')
      const lines = this.pdf.splitTextToSize(recommendation, this.pageWidth - 2 * this.margin - 10)
      this.pdf.text(lines, this.margin + 8, this.currentY)
      this.currentY += lines.length * 6 + 8
    })
    
    // Plan d'action sugg√©r√©
    this.currentY += 10
    this.addSubTitle('Plan d\'Action Sugg√©r√©')
    
    const actionPlan = [
      '1. Concentrez-vous sur les 2-3 points les plus faibles identifi√©s',
      '2. Pratiquez r√©guli√®rement en appliquant les conseils sp√©cifiques',
      '3. Analysez vos nouvelles photos pour mesurer vos progr√®s', 
      '4. √âtudiez le travail de photographes reconnus dans votre domaine',
      '5. Exp√©rimentez de nouvelles techniques tout en consolidant les bases'
    ]
    
    actionPlan.forEach(step => {
      const lines = this.pdf.splitTextToSize(step, this.pageWidth - 2 * this.margin)
      this.pdf.text(lines, this.margin, this.currentY)
      this.currentY += lines.length * 6 + 5
    })
  }

  private createConclusionPage(report: BatchReport) {
    this.addPage()
    
    this.addSectionTitle('üéØ Conclusion')
    
    // Message personnalis√© selon le niveau
    let conclusionMessage = ''
    if (report.avgScore >= 85) {
      conclusionMessage = 'F√©licitations ! Vos photos d√©montrent un excellent niveau technique et artistique. Continuez √† exp√©rimenter pour d√©velopper davantage votre style personnel et maintenir cette qualit√© exceptionnelle.'
    } else if (report.avgScore >= 70) {
      conclusionMessage = 'Votre niveau photographique est tr√®s satisfaisant. En vous concentrant sur les points d\'am√©lioration identifi√©s, vous pourrez rapidement atteindre l\'excellence.'
    } else if (report.avgScore >= 55) {
      conclusionMessage = 'Vous montrez un potentiel int√©ressant. Un travail r√©gulier sur les fondamentaux vous permettra de progresser significativement dans les prochains mois.'
    } else {
      conclusionMessage = 'Il y a beaucoup de marge de progression, ce qui est formidable ! Concentrez-vous sur les bases techniques et pratiquez r√©guli√®rement. Chaque photo est une opportunit√© d\'apprendre.'
    }
    
    const lines = this.pdf.splitTextToSize(conclusionMessage, this.pageWidth - 2 * this.margin)
    this.pdf.text(lines, this.margin, this.currentY)
    this.currentY += lines.length * 6 + 20
    
    // Contact et support
    this.addSubTitle('Support et Ressources')
    
    const supportInfo = [
      'Pour toute question sur ce rapport : contact@judgemyjpeg.com',
      'Analyses suppl√©mentaires disponibles sur : https://judgemyjpeg.com',
      'Retrouvez vos photos et analyses dans votre galerie personnelle'
    ]
    
    supportInfo.forEach(info => {
      this.pdf.text(info, this.margin, this.currentY)
      this.currentY += 8
    })
    
    // Footer final
    this.pdf.setTextColor(100, 116, 139)
    this.pdf.setFontSize(10)
    this.pdf.setFont('helvetica', 'italic')
    
    const finalFooter = `Rapport g√©n√©r√© le ${new Date().toLocaleDateString('fr-FR')} par JudgeMyJPEG`
    this.pdf.text(finalFooter, this.margin, 280)
  }

  private addPage() {
    if (this.pdf.getNumberOfPages() > 0) {
      this.pdf.addPage()
    }
    this.currentY = this.margin
  }

  private addSectionTitle(title: string) {
    this.pdf.setTextColor(236, 72, 153) // neon-pink
    this.pdf.setFontSize(18)
    this.pdf.setFont('helvetica', 'bold')
    this.pdf.text(title, this.margin, this.currentY)
    this.currentY += 15
    
    // Ligne d√©corative
    this.pdf.setDrawColor(236, 72, 153)
    this.pdf.setLineWidth(0.5)
    this.pdf.line(this.margin, this.currentY, this.pageWidth - this.margin, this.currentY)
    this.currentY += 10
  }

  private addSubTitle(title: string) {
    this.pdf.setTextColor(34, 211, 238) // neon-cyan
    this.pdf.setFontSize(14)
    this.pdf.setFont('helvetica', 'bold')
    this.pdf.text(title, this.margin, this.currentY)
    this.currentY += 12
  }

  // Export d'une seule analyse
  async exportSingleAnalysis(
    photo: { filename: string, url: string },
    analysis: PhotoAnalysis,
    userEmail: string
  ): Promise<void> {
    // Page de garde pour analyse simple
    await this.createSingleCoverPage(photo, analysis, userEmail)
    
    // Analyse d√©taill√©e
    const mockPhoto: BatchPhoto = {
      id: '1',
      file: new File([], photo.filename),
      url: photo.url,
      analysis,
      status: 'completed'
    }
    
    await this.createPhotoAnalysisPage(mockPhoto)
    
    // Recommandations
    this.addPage()
    this.addSectionTitle('üí° Recommandations')
    
    if (analysis.suggestions.length > 0) {
      analysis.suggestions.forEach((suggestion, index) => {
        this.pdf.text(`${index + 1}.`, this.margin, this.currentY)
        const lines = this.pdf.splitTextToSize(suggestion, this.pageWidth - 2 * this.margin - 10)
        this.pdf.text(lines, this.margin + 8, this.currentY)
        this.currentY += lines.length * 6 + 3
      })
    }
    
    const timestamp = new Date().toISOString().split('T')[0]
    this.pdf.save(`JudgeMyJPEG_${photo.filename.replace(/\.[^/.]+$/, "")}_${timestamp}.pdf`)
  }

  private async createSingleCoverPage(
    photo: { filename: string, url: string },
    analysis: PhotoAnalysis,
    userEmail: string
  ) {
    this.pdf.setFillColor(15, 23, 42)
    this.pdf.rect(0, 0, this.pageWidth, this.pageHeight, 'F')
    
    // Titre
    this.pdf.setTextColor(236, 72, 153)
    this.pdf.setFontSize(28)
    this.pdf.setFont('helvetica', 'bold')
    
    const title = 'JudgeMyJPEG'
    const titleWidth = this.pdf.getTextWidth(title)
    this.pdf.text(title, (this.pageWidth - titleWidth) / 2, 50)
    
    // Sous-titre
    this.pdf.setTextColor(34, 211, 238)
    this.pdf.setFontSize(16)
    this.pdf.setFont('helvetica', 'normal')
    
    const subtitle = 'Analyse Photographique D√©taill√©e'
    const subtitleWidth = this.pdf.getTextWidth(subtitle)
    this.pdf.text(subtitle, (this.pageWidth - subtitleWidth) / 2, 65)
    
    // Nom du fichier
    this.pdf.setTextColor(148, 163, 184)
    this.pdf.setFontSize(14)
    this.pdf.setFont('helvetica', 'bold')
    
    const filename = photo.filename
    const filenameWidth = this.pdf.getTextWidth(filename)
    this.pdf.text(filename, (this.pageWidth - filenameWidth) / 2, 85)
    
    // Score
    this.pdf.setFillColor(34, 211, 238, 0.2)
    this.pdf.roundedRect(60, 100, 90, 30, 5, 5, 'F')
    
    this.pdf.setTextColor(34, 211, 238)
    this.pdf.setFontSize(20)
    
    const scoreText = `${analysis.score}/100`
    const scoreWidth = this.pdf.getTextWidth(scoreText)
    this.pdf.text(scoreText, (this.pageWidth - scoreWidth) / 2, 120)
    
    // Info
    this.pdf.setTextColor(148, 163, 184)
    this.pdf.setFontSize(10)
    this.pdf.text(`Date: ${new Date().toLocaleDateString('fr-FR')}`, this.margin, 160)
    this.pdf.text(`Client: ${userEmail}`, this.margin, 170)
  }
}