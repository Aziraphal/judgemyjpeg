generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  accounts              Account[]
  sessions              Session[]
  photos                Photo[]
  collections           Collection[]
  favorites             Favorite[]
  
  // Subscription fields
  subscriptionStatus    String    @default("free") // "free", "premium", "lifetime"
  stripeCustomerId      String?   @unique
  stripeSubscriptionId  String?   @unique
  currentPeriodEnd      DateTime?
  monthlyAnalysisCount  Int       @default(0)
  lastAnalysisReset     DateTime  @default(now())
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Index pour performance
  @@index([subscriptionStatus])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Photo {
  id              String   @id @default(cuid())
  userId          String
  url             String
  filename        String
  analysis        String?  @db.Text
  score           Float?
  potentialScore  Float?
  improvements    String?  @db.Text
  suggestions     String?  @db.Text
  isTopPhoto      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites       Favorite[]
  collectionItems CollectionItem[]

  // Index pour performance
  @@index([userId, createdAt])
  @@index([score])
  @@index([isTopPhoto])
  @@index([createdAt])
}

model Collection {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  color       String   @default("#FF006E")
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CollectionItem[]

  @@unique([userId, name])
}

model CollectionItem {
  id           String @id @default(cuid())
  collectionId String
  photoId      String
  addedAt      DateTime @default(now())

  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  photo      Photo      @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([collectionId, photoId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  photoId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo Photo @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([userId, photoId])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  email       String?
  ipAddress   String
  userAgent   String?
  eventType   String   // AuditEventType enum
  description String
  metadata    String?  @db.Text // JSON string
  riskLevel   String   // low, medium, high, critical
  success     Boolean
  timestamp   DateTime @default(now())

  // Index pour performance des requêtes de sécurité
  @@index([userId, timestamp])
  @@index([eventType, timestamp])
  @@index([riskLevel, timestamp])
  @@index([ipAddress, timestamp])
}