generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String           @id @default(cuid())
  name                 String?
  email                String?          @unique
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  currentPeriodEnd     DateTime?
  lastAnalysisReset    DateTime         @default(now())
  monthlyAnalysisCount Int              @default(0)
  stripeCustomerId     String?          @unique
  stripeSubscriptionId String?          @unique
  subscriptionStatus   String           @default("free")
  password             String?
  backupCodes          String[]         @default([])
  twoFactorEnabled     Boolean          @default(false)
  twoFactorSecret      String?
  twoFactorVerified    DateTime?
  hashedPassword       String?
  resetToken           String?
  resetTokenExpiry     DateTime?
  nickname             String?
  starterAnalysisCount Int              @default(0)
  starterExportsCount  Int              @default(0)
  starterPackActivated DateTime?
  starterPackUsed      Boolean          @default(false)
  starterSharesCount   Int              @default(0)
  starterPackPurchased Boolean          @default(false)
  role                 String           @default("user")
  isAdmin              Boolean          @default(false)
  manualPremiumAccess  Boolean          @default(false)
  manualPremiumReason  String?
  manualPremiumGrantedAt DateTime?
  manualPremiumGrantedBy String?
  accounts             Account[]
  collections          Collection[]
  favorites            Favorite[]
  feedbacks            Feedback[]
  photos               Photo[]
  reports              Report[]
  sessions             Session[]
  userPreferences      UserPreferences?
  userSessions         UserSession[]
  apiKeys              ApiKey[]
  apiUsages            ApiUsage[]

  @@index([subscriptionStatus])
  @@index([createdAt])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  displayName           String?
  preferredAnalysisMode String   @default("professional")
  defaultExportFormat   String   @default("pdf")
  theme                 String   @default("cosmic")
  language              String   @default("fr")
  shareAnalytics        Boolean  @default(true)
  publicProfile         Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Photo {
  id               String           @id @default(cuid())
  userId           String
  url              String
  filename         String
  analysis         String?
  score            Float?
  suggestions      String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  isTopPhoto       Boolean          @default(false)
  improvements     String?
  potentialScore   Float?
  analysisLanguage String           @default("fr")
  analysisMetadata String?
  analysisTone     String           @default("professional")
  exifData         String?
  hasExifData      Boolean          @default(false)
  partialScores    String?
  photoType        String           @default("other")
  sessionId        String?
  collectionItems  CollectionItem[]
  favorites        Favorite[]
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports          Report[]

  @@index([userId, createdAt])
  @@index([score])
  @@index([isTopPhoto])
  @@index([createdAt])
  @@index([photoType])
  @@index([analysisTone])
  @@index([hasExifData])
}

model Collection {
  id          String           @id @default(cuid())
  userId      String
  name        String
  description String?
  color       String           @default("#FF006E")
  isPublic    Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       CollectionItem[]

  @@unique([userId, name])
}

model CollectionItem {
  id           String     @id @default(cuid())
  collectionId String
  photoId      String
  addedAt      DateTime   @default(now())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  photo        Photo      @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([collectionId, photoId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  photoId   String
  createdAt DateTime @default(now())
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, photoId])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String?
  email       String?
  ipAddress   String
  userAgent   String?
  eventType   String
  description String
  metadata    String?
  riskLevel   String
  success     Boolean
  timestamp   DateTime @default(now())

  @@index([userId, timestamp])
  @@index([eventType, timestamp])
  @@index([riskLevel, timestamp])
  @@index([ipAddress, timestamp])
}

model UserSession {
  id                 String    @id @default(uuid())
  userId             String
  deviceFingerprint  String
  deviceName         String
  browser            String
  os                 String
  ipAddress          String
  location           String
  createdAt          DateTime  @default(now())
  lastActivity       DateTime  @default(now())
  expiresAt          DateTime
  isActive           Boolean   @default(true)
  isSuspicious       Boolean   @default(false)
  riskScore          Int       @default(0)
  invalidatedAt      DateTime?
  invalidationReason String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([deviceFingerprint])
  @@index([ipAddress, createdAt])
  @@index([expiresAt])
  @@index([lastActivity])
}

model Report {
  id         String    @id @default(cuid())
  reporterId String
  photoId    String?
  photoUrl   String?
  reason     String
  details    String?
  status     String    @default("pending")
  reporterIp String?
  reviewedBy String?
  reviewedAt DateTime?
  resolution String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  photo      Photo?    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  reporter   User      @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([reporterId, createdAt])
  @@index([status, createdAt])
  @@index([reason, createdAt])
  @@index([reporterIp, createdAt])
}

model Feedback {
  id         String   @id @default(cuid())
  userId     String?
  email      String?
  type       String
  category   String?
  rating     Int?
  title      String?
  message    String
  page       String?
  userAgent  String?
  metadata   String?
  status     String   @default("new")
  adminNotes String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [userId], references: [id])

  @@index([type, createdAt])
  @@index([status, createdAt])
  @@index([rating, createdAt])
}

model ApiKey {
  id                        String     @id @default(cuid())
  userId                    String
  name                      String     // Nom descriptif de la clé
  key                       String     @unique
  isActive                  Boolean    @default(true)
  rateLimit                 Int        @default(100) // Requêtes par heure
  creditsRemaining          Int        @default(1000)
  totalCreditsAllocated     Int        @default(1000)
  stripeSubscriptionItemId  String?    // Pour metered billing Stripe
  lastUsedAt                DateTime?
  createdAt                 DateTime   @default(now())
  expiresAt                 DateTime?
  user                      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  usages                    ApiUsage[]

  @@index([userId])
  @@index([key])
  @@index([isActive])
}

model ApiUsage {
  id            String    @id @default(cuid())
  apiKeyId      String
  userId        String
  endpoint      String    // Ex: /api/v1/analyze
  creditsUsed   Int       @default(1)
  requestData   Json?     // Métadonnées de la requête
  responseTime  Int?      // Temps de réponse en ms
  success       Boolean   @default(true)
  errorMessage  String?
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime  @default(now())
  apiKey        ApiKey    @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([apiKeyId, timestamp])
  @@index([userId, timestamp])
  @@index([endpoint, timestamp])
  @@index([success])
}
